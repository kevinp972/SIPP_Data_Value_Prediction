knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(lang = "en_US")
data <- read.table('data_tr.txt', head = T)[,-1]
head(data)
colSums(is.na(data))
any(duplicated(data))
summary(data)
hist(data$tw)
data = subset(data, data$tw<1000000)
k <- 10
set.seed(123)
rand <- sample(nrow(data), floor(nrow(data)/k))
train <- setdiff(c(1:nrow(data)), rand)
y_rand <- data$tw[rand]
regnohs <- lm(tw ~ 1 + hs + smcol + col, data = data[train,])
reghs <- lm(tw ~ 1 + nohs + smcol + col, data = data[train,])
regsmcol <- lm(tw ~ 1 + nohs + hs + col, data = data[train,])
regcol <- lm(tw ~ 1 + nohs + hs + smcol, data = data[train,])
prnohs <- predict(regnohs, newdata = data[rand,])
prhs <- predict(reghs, newdata = data[rand,])
prsmcol <- predict(regsmcol, newdata = data[rand,])
prcol <- predict(regcol, newdata = data[rand,])
MSEnohs <- mean((y_rand-prnohs)^2)
MSEhs <- mean((y_rand-prhs)^2)
MSEsmcol <- mean((y_rand-prsmcol)^2)
MSEcol <- mean((y_rand-prcol)^2)
c(MSEnohs, MSEhs, MSEsmcol, MSEcol)
data <- data[, !(names(data) %in% c("hs", "hval", "hmort", "educ"))]
formula <- as.formula(paste(response_var, "~ ."))
final_model <- lm(tw ~., data=data)
summary(final_model)
baseline <- lm(tw ~., data=data)
summary(baseline)
baseline <- lm(tw ~., data=data)
summary(baseline$coefficients)
baseline <- lm(tw ~., data=data)
summary(baseline)
source("KfoldCVFunctions.R")
mean_mspe_ols <- compute_ols_mspe(data, response_var = "tw")
print("Mean MSPE of this model is " + mean_mspe_ols + ".")
source("KfoldCVFunctions.R")
mean_mspe_ols <- compute_ols_mspe(data, response_var = "tw")
print("Mean MSPE of this model is " + str(mean_mspe_ols) + ".")
source("KfoldCVFunctions.R")
mean_mspe_ols <- compute_ols_mspe(data, response_var = "tw")
print(cat("Mean MSPE of this model is", mean_mspe_ols, ".\n"))
source("KfoldCVFunctions.R")
mean_mspe_ols <- compute_ols_mspe(data, response_var = "tw")
cat("Mean MSPE of this model is", mean_mspe_ols, ".\n")
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(lang = "en_US")
data <- read.table('data_tr.txt', head = T)[,-1]
head(data)
colSums(is.na(data))
any(duplicated(data))
summary(data)
hist(data$tw)
data = subset(data, data$tw<1000000)
k <- 10
set.seed(123)
rand <- sample(nrow(data), floor(nrow(data)/k))
train <- setdiff(c(1:nrow(data)), rand)
y_rand <- data$tw[rand]
regnohs <- lm(tw ~ 1 + hs + smcol + col, data = data[train,])
reghs <- lm(tw ~ 1 + nohs + smcol + col, data = data[train,])
regsmcol <- lm(tw ~ 1 + nohs + hs + col, data = data[train,])
regcol <- lm(tw ~ 1 + nohs + hs + smcol, data = data[train,])
prnohs <- predict(regnohs, newdata = data[rand,])
prhs <- predict(reghs, newdata = data[rand,])
prsmcol <- predict(regsmcol, newdata = data[rand,])
prcol <- predict(regcol, newdata = data[rand,])
MSEnohs <- mean((y_rand-prnohs)^2)
MSEhs <- mean((y_rand-prhs)^2)
MSEsmcol <- mean((y_rand-prsmcol)^2)
MSEcol <- mean((y_rand-prcol)^2)
c(MSEnohs, MSEhs, MSEsmcol, MSEcol)
data <- data[, !(names(data) %in% c("hs", "hval", "hmort", "educ"))]
baseline <- lm(tw ~., data=data)
summary(baseline)
source("KfoldCVFunctions.R")
mean_mspe_ols <- compute_ols_mspe(data, response_var = "tw")
cat("Mean MSPE of this model is", mean_mspe_ols, ".\n")
baseline <- benchmark <- mean_mspe_ols
source("KfoldCVFunctions.R")
mean_mspe_lasso <- compute_lasso_mspe(data, response_var = "tw")
mean_mspe_forward <- compute_forward_stepwise_mspe(data, response_var = "tw")
mean_mspe_backward <- compute_backward_stepwise_mspe(data, response_var = "tw")
# Print results
print(c(Baseline = benchmark,
Lasso = mean_mspe_lasso,
Forward_Stepwise = mean_mspe_forward,
Backward_Stepwise = mean_mspe_backward))
library(hdi)
response_var <- "tw"
y <- data[[response_var]]
X <- as.matrix(data[ , !(names(data) %in% response_var)])
lasso_cv <- cv.glmnet(X, y, alpha = 1)
best_lambda <- lasso_cv$lambda.min
lasso_model <- glmnet(X, y, lambda = best_lambda, alpha = 1)
lasso_inference <- hdi::lasso.proj(X, y)
print(coef(lasso_model))
print(lasso_inference$pval)
data_subset <- data[, !(names(data) %in% c("nohs", "col", "fsize"))]
source("KfoldCVFunctions.R")
mean_mspe_ols <- compute_ols_mspe(data_subset, response_var = "tw")
mean_mspe_ridge <- compute_ridge_mspe(data_subset, response_var = "tw")
print(c(
OLS_on_all_features = benchmark,
OLS_on_selected_features = mean_mspe_ols,
Ridge = mean_mspe_ridge,
Lasso = mean_mspe_lasso,
Forward_Stepwise = mean_mspe_forward,
Backward_Stepwise = mean_mspe_backward
))
benchmark = mean_mspe_ols
library(tidyverse)
library(gridExtra)
plot_scatterplots <- function(data, response_var, feature_names) {
plot_list <- list()
for (feature in feature_names) {
p <- ggplot(data = data) +
geom_point(mapping = aes(x = !!sym(feature), y = !!sym(response_var)),
alpha = 0.5) +
labs(x = feature, y = response_var) +
theme_minimal() +
theme(aspect.ratio = 1)
plot_list[[feature]] <- p
}
return(plot_list)
}
plots <- plot_scatterplots(data_subset,
response_var = "tw",
c("ira", "nifa", "inc", "hequity", "age"))
do.call(grid.arrange, c(plots, ncol = 3))
source("select_optimal_knots.R")
result = select_optimal_knots(data, "tw", "age", 20)
print(result$knots_chosen)
print(result$boundary_knots)
print(result$plot)
age_spline_model <- lm(tw ~ bs(age,
knots = result$knots_chosen,
Boundary.knots = result$boundary_knots),
data = data)
x.grid <- seq(from = result$boundary_knots[1],
to = result$boundary_knots[2],
length.out = 1000)
pr <- predict(age_spline_model, newdata = data.frame(age = x.grid))
predictions <- data.frame(age = x.grid, tw = pr)
ggplot(data = data) +
geom_point(mapping = aes(x = age, y = tw)) +
geom_line(data = predictions,
mapping = aes(x = age, y = tw),
lwd = 1,
color = "blue")
source("spline_transform_dataset.R")
transformed_data <- spline_transform_dataset(data,
"age",
result$knots_chosen,
result$boundary_knots)
transformed_data_sub <- spline_transform_dataset(data_subset,
"age",
result$knots_chosen,
result$boundary_knots)
source("KfoldCVFunctions.R")
mean_mspe_lasso <- compute_lasso_mspe(transformed_data, response_var = "tw")
mean_mspe_forward <- compute_forward_stepwise_mspe(transformed_data, response_var = "tw")
mean_mspe_backward <- compute_backward_stepwise_mspe(transformed_data, response_var = "tw")
mean_mspe_ols <- compute_ols_mspe(transformed_data_sub, response_var = "tw")
mean_mspe_ridge <- compute_ridge_mspe(transformed_data_sub, response_var = "tw")
print(c(
OLS_without_transformations = benchmark,
OLS = mean_mspe_ols,
Ridge = mean_mspe_ridge,
Lasso = mean_mspe_lasso,
Forward_Stepwise = mean_mspe_forward,
Backward_Stepwise = mean_mspe_backward
))
ggplot(data = data) +
geom_point(mapping = aes(x = inc, y = tw))
source("select_optimal_knots_natural.R")
result = select_optimal_knots_natural(data, "tw", "inc", 8)
print(result$plot)
inc_spline_model <- lm(tw ~ ns(inc,
knots = result$knots_chosen,
Boundary.knots = result$boundary_knots),
data = data)
x.grid <- seq(from = result$boundary_knots[1],
to = result$boundary_knots[2],
length.out = 1000)
pr <- predict(inc_spline_model, newdata = data.frame(inc = x.grid))
predictions <- data.frame(inc = x.grid, tw = pr)
ggplot(data = data) +
geom_point(mapping = aes(x = inc, y = tw)) +
geom_line(data = predictions,
mapping = aes(x = inc, y = tw),
lwd = 1,
color = "blue")
source("natural_spline_transform_dataset.R")
transformed_data <- natural_spline_transform_dataset(data,
"inc",
result$knots_chosen,
result$boundary_knots)
transformed_data_sub <- natural_spline_transform_dataset(data_subset,
"inc",
result$knots_chosen,
result$boundary_knots)
source("KfoldCVFunctions.R")
mean_mspe_lasso <- compute_lasso_mspe(transformed_data, response_var = "tw")
mean_mspe_forward <- compute_forward_stepwise_mspe(transformed_data, response_var = "tw")
mean_mspe_backward <- compute_backward_stepwise_mspe(transformed_data, response_var = "tw")
mean_mspe_ols <- compute_ols_mspe(transformed_data_sub, response_var = "tw")
mean_mspe_ridge <- compute_ridge_mspe(transformed_data_sub, response_var = "tw")
print(c(
OLS_without_transformations = benchmark,
OLS = mean_mspe_ols,
Ridge = mean_mspe_ridge,
Lasso = mean_mspe_lasso,
Forward_Stepwise = mean_mspe_forward,
Backward_Stepwise = mean_mspe_backward
))
source("create_interactions.R")
data_with_interactions <- create_interactions(data_subset, "tw", c("ira", "nifa", "hequity"))
print(colnames(data_with_interactions))
source("KfoldCVFunctions.R")
mean_mspe_lasso <- compute_lasso_mspe(data_with_interactions, response_var = "tw")
mean_mspe_forward <- compute_forward_stepwise_mspe(data_with_interactions, response_var = "tw")
mean_mspe_backward <- compute_backward_stepwise_mspe(data_with_interactions, response_var = "tw")
print(c(
OLS_without_interactions = benchmark,
Lasso = mean_mspe_lasso,
Forward_Stepwise = mean_mspe_forward,
Backward_Stepwise = mean_mspe_backward
))
full <- lm(as.formula(paste(response_var, "~ .")), data=data_with_interactions)
null <- lm(as.formula(paste(response_var, "~ 1")), data=data_with_interactions)
backward <- stepAIC(full, scope=list(lower=null, upper=full), trace = FALSE, direction='backward')
summary(backward)
ggplot(data, aes(x = age, y = tw, color = factor(e401))) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Interaction between E401 and Age on TW")
data_with_selected_interactions <- data_subset %>%
mutate(
`e401:inc` = e401 * inc,
`e401:age` = e401 * age,
`inc:male` = inc * male,
`inc:twoearn` = inc * twoearn,
`inc:age` = inc * age,
`inc:marr` = inc * marr,
`male:smcol` = male * smcol,
`twoearn:age` = twoearn * age
) %>%
select(-smcol)
mean_mspe_ols <- compute_ols_mspe(data_with_selected_interactions, response_var = "tw")
mean_mspe_ridge <- compute_ridge_mspe(data_with_selected_interactions, response_var = "tw")
print(c(
OLS_without_interactions = benchmark,
OLS = mean_mspe_ols,
Ridge = mean_mspe_ridge,
Lasso = mean_mspe_lasso,
Forward_Stepwise = mean_mspe_forward,
Backward_Stepwise = mean_mspe_backward
))
formula <- as.formula(paste(response_var, "~ ."))
final_model <- lm(formula, data=data_with_selected_interactions)
summary(final_model)
plot(final_model, which = 1)
plot(final_model, which = 5)
data_te <- read.table("data_for_prediction.txt", header = TRUE, sep = "\t", dec = ".")[,-1]
data_te <- data_te %>%
mutate(
`e401:inc` = e401 * inc,
`e401:age` = e401 * age,
`inc:male` = inc * male,
`inc:twoearn` = inc * twoearn,
`inc:age` = inc * age,
`inc:marr` = inc * marr,
`male:smcol` = male * smcol,
`twoearn:age` = twoearn * age
)
print(colnames(data_te))
predictions <- predict(final_model, newdata=data_te)
data_te <- cbind(predicted_tw = predictions, data_te)
write.csv(data_te, "Predictions.csv")
write.table(predictions, file = 'Predictions.txt')
percentage_reduction <- round(((benchmark - mean_mspe_ols) / benchmark) * 100, 1)
print(c(
MSPE_Basline_Model = baseline,
MSPE_Final_Model = mean_mspe_ols,
Percentage_Reduction = percentage_reduction
))
